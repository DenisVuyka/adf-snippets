{
    "adf-directive": {
        "description": "Generate a new Angular directive with ADF presets",
        "scope": "typescript",
        "prefix": "adf-directive",
        "body": [
            "import { Directive, OnInit, OnDestroy } from '@angular/core';",
            "import { Subscription } from 'rxjs/Rx';",
            "",
            "@Directive({",
            "    selector: '[${1:adfDirectiveName}]'",
            "})",
            "export class ${2:My}Directive implements OnInit, OnDestroy {",
            "    private subscriptions: Subscription[] = [];",
            "",
            "    ngOnInit() {",
            "        this.subscriptions.push(",
            "            /*",
            "            service.event.subscribe(() => this.doSomething()),",
            "            service.event.subscribe(() => this.doSomething())",
            "            */",
            "        );",
            "        ${0}",
            "    }",
            "",
            "    ngOnDestroy() {",
            "        this.subscriptions.forEach(subscription => subscription.unsubscribe());",
            "        this.subscriptions = [];",
            "    }",
            "}",
            ""
        ]
    },
    "adf-component": {
        "description": "Generate a new Angular component with ADF presets",
        "scope": "typescript",
        "prefix": "adf-component",
        "body": [
            "import { Component, OnInit, OnDestroy } from '@angular/core';",
            "import { Subscription } from 'rxjs/Rx';",
            "",
            "@Component({",
            "    selector: '${1:adf-component}',",
            "    templateUrl: './${2:my}.component.html',",
            "    styleUrls: ['./$2.component.scss']",
            "})",
            "export class ${3:My}Component implements OnInit, OnDestroy {",
            "    private subscriptions: Subscription[] = [];",
            "",
            "    ngOnInit() {",
            "        this.subscriptions.push(",
            "            /*",
            "            service.event.subscribe(() => this.doSomething()),",
            "            service.event.subscribe(() => this.doSomething())",
            "            */",
            "        );",
            "        ${0}",
            "    }",
            "",
            "    ngOnDestroy() {",
            "        this.subscriptions.forEach(subscription => subscription.unsubscribe());",
            "        this.subscriptions = [];",
            "    }",
            "}",
            ""
        ]
    }
}